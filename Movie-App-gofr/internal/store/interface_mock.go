// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RicheshZopsmart/Movie-App-gofr/internal/store (interfaces: MovieInterface)

// Package store is a generated GoMock package.
package store

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	model "github.com/RicheshZopsmart/Movie-App-gofr/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieInterface is a mock of MovieInterface interface
type MockMovieInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieInterfaceMockRecorder
}

// MockMovieInterfaceMockRecorder is the mock recorder for MockMovieInterface
type MockMovieInterfaceMockRecorder struct {
	mock *MockMovieInterface
}

// NewMockMovieInterface creates a new mock instance
func NewMockMovieInterface(ctrl *gomock.Controller) *MockMovieInterface {
	mock := &MockMovieInterface{ctrl: ctrl}
	mock.recorder = &MockMovieInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieInterface) EXPECT() *MockMovieInterfaceMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method
func (m *MockMovieInterface) CreateMovie(arg0 *gofr.Context, arg1 *model.MovieModel) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockMovieInterfaceMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieInterface)(nil).CreateMovie), arg0, arg1)
}

// DeleteByID mocks base method
func (m *MockMovieInterface) DeleteByID(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockMovieInterfaceMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMovieInterface)(nil).DeleteByID), arg0, arg1)
}

// GetAll mocks base method
func (m *MockMovieInterface) GetAll(arg0 *gofr.Context) (*[]model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*[]model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockMovieInterfaceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieInterface)(nil).GetAll), arg0)
}

// GetByID mocks base method
func (m *MockMovieInterface) GetByID(arg0 *gofr.Context, arg1 int) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMovieInterfaceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieInterface)(nil).GetByID), arg0, arg1)
}

// UpdateByID mocks base method
func (m *MockMovieInterface) UpdateByID(arg0 *gofr.Context, arg1 *model.MovieModel) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID
func (mr *MockMovieInterfaceMockRecorder) UpdateByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockMovieInterface)(nil).UpdateByID), arg0, arg1)
}
