// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RicheshZopsmart/Movie-App-gofr/internal/service (interfaces: MovieServiceInterface)

// Package service is a generated GoMock package.
package service

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	model "github.com/RicheshZopsmart/Movie-App-gofr/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieServiceInterface is a mock of MovieServiceInterface interface
type MockMovieServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceInterfaceMockRecorder
}

// MockMovieServiceInterfaceMockRecorder is the mock recorder for MockMovieServiceInterface
type MockMovieServiceInterfaceMockRecorder struct {
	mock *MockMovieServiceInterface
}

// NewMockMovieServiceInterface creates a new mock instance
func NewMockMovieServiceInterface(ctrl *gomock.Controller) *MockMovieServiceInterface {
	mock := &MockMovieServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMovieServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieServiceInterface) EXPECT() *MockMovieServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteByIDService mocks base method
func (m *MockMovieServiceInterface) DeleteByIDService(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDService indicates an expected call of DeleteByIDService
func (mr *MockMovieServiceInterfaceMockRecorder) DeleteByIDService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDService", reflect.TypeOf((*MockMovieServiceInterface)(nil).DeleteByIDService), arg0, arg1)
}

// GetAllService mocks base method
func (m *MockMovieServiceInterface) GetAllService(arg0 *gofr.Context) (*[]model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllService", arg0)
	ret0, _ := ret[0].(*[]model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllService indicates an expected call of GetAllService
func (mr *MockMovieServiceInterfaceMockRecorder) GetAllService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllService", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetAllService), arg0)
}

// GetByIDService mocks base method
func (m *MockMovieServiceInterface) GetByIDService(arg0 *gofr.Context, arg1 int) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDService", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDService indicates an expected call of GetByIDService
func (mr *MockMovieServiceInterfaceMockRecorder) GetByIDService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDService", reflect.TypeOf((*MockMovieServiceInterface)(nil).GetByIDService), arg0, arg1)
}

// InsertMovieService mocks base method
func (m *MockMovieServiceInterface) InsertMovieService(arg0 *gofr.Context, arg1 *model.MovieModel) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMovieService", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMovieService indicates an expected call of InsertMovieService
func (mr *MockMovieServiceInterfaceMockRecorder) InsertMovieService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMovieService", reflect.TypeOf((*MockMovieServiceInterface)(nil).InsertMovieService), arg0, arg1)
}

// UpdatedByIDService mocks base method
func (m *MockMovieServiceInterface) UpdatedByIDService(arg0 *gofr.Context, arg1 *model.MovieModel) (*model.MovieModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedByIDService", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedByIDService indicates an expected call of UpdatedByIDService
func (mr *MockMovieServiceInterfaceMockRecorder) UpdatedByIDService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedByIDService", reflect.TypeOf((*MockMovieServiceInterface)(nil).UpdatedByIDService), arg0, arg1)
}
