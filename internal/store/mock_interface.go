// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iamkakashi/movie-gofr/internal/store (interfaces: MovieStorer)

// Package store is a generated GoMock package.
package store

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iamkakashi/movie-gofr/internal/model"
	reflect "reflect"
)

// MockMovieStorer is a mock of MovieStorer interface
type MockMovieStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieStorerMockRecorder
}

// MockMovieStorerMockRecorder is the mock recorder for MockMovieStorer
type MockMovieStorerMockRecorder struct {
	mock *MockMovieStorer
}

// NewMockMovieStorer creates a new mock instance
func NewMockMovieStorer(ctrl *gomock.Controller) *MockMovieStorer {
	mock := &MockMovieStorer{ctrl: ctrl}
	mock.recorder = &MockMovieStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieStorer) EXPECT() *MockMovieStorerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMovieStorer) Create(arg0 *gofr.Context, arg1 *model.Movie) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMovieStorerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieStorer)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockMovieStorer) Delete(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMovieStorerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieStorer)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockMovieStorer) Get(arg0 *gofr.Context) ([]*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMovieStorerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMovieStorer)(nil).Get), arg0)
}

// GetByID mocks base method
func (m *MockMovieStorer) GetByID(arg0 *gofr.Context, arg1 int) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMovieStorerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieStorer)(nil).GetByID), arg0, arg1)
}

// Update mocks base method
func (m *MockMovieStorer) Update(arg0 *gofr.Context, arg1 *model.Movie) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMovieStorerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieStorer)(nil).Update), arg0, arg1)
}
