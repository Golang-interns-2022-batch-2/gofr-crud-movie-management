// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shivam/Crud_Gofr/internal/service (interfaces: Interface)

// Package service is a generated GoMock package.
package service

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	models "github.com/shivam/Crud_Gofr/internal/models"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteService mocks base method
func (m *MockInterface) DeleteService(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockInterfaceMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockInterface)(nil).DeleteService), arg0, arg1)
}

// GetAllService mocks base method
func (m *MockInterface) GetAllService(arg0 *gofr.Context) ([]*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllService", arg0)
	ret0, _ := ret[0].([]*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllService indicates an expected call of GetAllService
func (mr *MockInterfaceMockRecorder) GetAllService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllService", reflect.TypeOf((*MockInterface)(nil).GetAllService), arg0)
}

// GetByIDService mocks base method
func (m *MockInterface) GetByIDService(arg0 *gofr.Context, arg1 int) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDService", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDService indicates an expected call of GetByIDService
func (mr *MockInterfaceMockRecorder) GetByIDService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDService", reflect.TypeOf((*MockInterface)(nil).GetByIDService), arg0, arg1)
}

// InsertService mocks base method
func (m *MockInterface) InsertService(arg0 *gofr.Context, arg1 *models.Movie) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertService", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertService indicates an expected call of InsertService
func (mr *MockInterfaceMockRecorder) InsertService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertService", reflect.TypeOf((*MockInterface)(nil).InsertService), arg0, arg1)
}

// UpdatedService mocks base method
func (m *MockInterface) UpdatedService(arg0 *gofr.Context, arg1 *models.Movie) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedService", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedService indicates an expected call of UpdatedService
func (mr *MockInterfaceMockRecorder) UpdatedService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedService", reflect.TypeOf((*MockInterface)(nil).UpdatedService), arg0, arg1)
}
