// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iamkakashi/movie-gofr/internal/service (interfaces: MovieServicer)

// Package service is a generated GoMock package.
package service

import (
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iamkakashi/movie-gofr/internal/model"
	reflect "reflect"
)

// MockMovieServicer is a mock of MovieServicer interface
type MockMovieServicer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServicerMockRecorder
}

// MockMovieServicerMockRecorder is the mock recorder for MockMovieServicer
type MockMovieServicerMockRecorder struct {
	mock *MockMovieServicer
}

// NewMockMovieServicer creates a new mock instance
func NewMockMovieServicer(ctrl *gomock.Controller) *MockMovieServicer {
	mock := &MockMovieServicer{ctrl: ctrl}
	mock.recorder = &MockMovieServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieServicer) EXPECT() *MockMovieServicerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMovieServicer) Create(arg0 *gofr.Context, arg1 *model.Movie) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMovieServicerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieServicer)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockMovieServicer) Delete(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMovieServicerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieServicer)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockMovieServicer) Get(arg0 *gofr.Context) ([]*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMovieServicerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMovieServicer)(nil).Get), arg0)
}

// GetByID mocks base method
func (m *MockMovieServicer) GetByID(arg0 *gofr.Context, arg1 int) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMovieServicerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieServicer)(nil).GetByID), arg0, arg1)
}

// Update mocks base method
func (m *MockMovieServicer) Update(arg0 *gofr.Context, arg1 *model.Movie) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMovieServicerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieServicer)(nil).Update), arg0, arg1)
}
